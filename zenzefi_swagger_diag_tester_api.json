{
    "swagger": "2.0",
    "info": {
        "version": "0.0.1",
        "title": "ZenZefi Interface Documentation"
    },
    "schemes": [
        "https"
    ],
    "basePath": "/v1",
    "paths": {
        "/certificates/diagCert": {
            "post": {
                "description": "Retrieves the diagnostic certificate in order to authenticate with the tester against the ECU (UC30).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "DiagCertRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DiagCertRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When exactly one certificate is found matching the search criteria.",
                        "schema": {
                            "$ref": "#/definitions/DiagCertResponseBody"
                        }
                    },
                    "202": {
                        "description": "No certificate matches the filter criteria. **Message** is `No Certificate was found matchin the filter criteria`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/checkOwnership": {
            "post": {
                "description": "Calculates a signature over the given challenge to proof to the ECU that the tester is in possession of the private key of the previously sent diagnostic certificate. This method only calculates the signature if the given ecuSignature and ecuCert are both valid (UC36).\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "CheckOwnershipRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckOwnershipRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The challenge could be signed. **ECUProofOfOwnership** contains the calculated signature.",
                        "schema": {
                            "$ref": "#/definitions/CheckOwnershipResponseBody"
                        }
                    },
                    "207": {
                        "description": "When no certificate could be found with the serial number from the parameter list. **Message** is `No certificate with given serial number found`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "211": {
                        "description": "If signing of the challenge fails. **Message** is `CheckOwnership Validation failed`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "239": {
                        "description": "If selected certificate is not a diagnostic authentication certificate. **Message** is `No Diagnostic Authentication Certificate Selected to sign the Challenge`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/enhRightsDiagCert": {
            "post": {
                "description": "Retrieves all diagnostic enhanced rights certificates for the given diagnostic certificate (UC31).\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "EnhDiagRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EnhDiagRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "One or more certificates have been found that match the search criteria. Array **EnhDiagCert** contains the list of matching Enhanced Rights Certificates.",
                        "schema": {
                            "$ref": "#/definitions/EnhDiagResponseBody"
                        }
                    },
                    "202": {
                        "description": "If no certificate matches the search criteria. **Message** is `No Certificate was found matching the filter criteria`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/secureVariantCoding": {
            "post": {
                "description": "Calculates the signature over the given codingData. It uses the active certificate in the loaded certificate store for loading (UC33).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "SecureVariantCodingRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecureVariantCodingRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The VariantCodingCertificate has been resolved and the CodingString has been signed. **VariantCodingCertificate** and computed **Signature** are returned.",
                        "schema": {
                            "$ref": "#/definitions/SecureVariantCodingResponseBody"
                        }
                    },
                    "202": {
                        "description": "When no matching VariantCodingCertificate could be found. **Message** is `No Certificate was found matching the filter criteria`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "203": {
                        "description": "Signing CodingString failed. **Message** is `Signing Coding String failed`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/timeCert": {
            "post": {
                "description": "Retrieves the currently active time certificate from the certificate store (UC32).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "TimeCertRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TimeCertRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "When one or more certificates have been found matching the search criteria.",
                        "schema": {
                            "$ref": "#/definitions/TimeCertResponseBody"
                        }
                    },
                    "202": {
                        "description": "If no certificate matches the search criteria. **Message** is `No Certificate was found matching the filter criteria`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/checkActiveDiagCert": {
            "post": {
                "description": "Checks whether the diagnostic certificate with the given serial number is still selected as the active certificate (UC35).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "CheckActiveDiagRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckActiveDiagRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was handled successfully. **Result** is `true`, if the certificate with the given serial number is still selected within ZenZefi; `false` otherwise.",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "202": {
                        "description": "No certificate matches the filter criteria. **Message** is `No Certificate was found matching the filter criteria`. **Result** is `False`."
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/checkSignature": {
            "post": {
                "description": "Validates the signature for the coding data and certificate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "CheckSignatureRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CheckSignatureRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signature was validated successfully.",
                        "schema": {
                            "$ref": "#/definitions/Response"
                        }
                    },
                    "default": {
                        "description": "The signature couldn't be validated.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/replacementPackage": {
            "post": {
                "description": "Retrieves new certificates for an ECU based on the current ECU certificate (UC38).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ReplacementPackageRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ReplacementPackageRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested certificates have been returned to the application on the diagnosis tester device.",
                        "schema": {
                            "$ref": "#/definitions/ReplacementPackageResponseBody"
                        }
                    },
                    "204": {
                        "description": "When result is ambiguous and user clicks cancel. **Message** is `Canceled by User`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "205": {
                        "description": "When the user took too long for selecting the certificates manually. **Message** is `Timer elapsed, no replacement package selected by User`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "212": {
                        "description": "When not all required certificate types could be found or any unknown error. **Message** is `Cannot provide ECU Replacement Package`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "234": {
                        "description": "When no registered user is logged in. **Message** is `Request denied. No User is logged in`.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/id": {
            "post": {
                "description": "Retrieves certificate with serial id for backend certificate",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "CertificateRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CertificateRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificates successfully retrieved.",
                        "schema": {
                            "$ref": "#/definitions/CertificateResponseBody"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/certificates/secOCISCert": {
            "post": {
                "description": "Retrieves SecOCIS certificate. A SecOCIS certificate is in principal a enhanced rights certificate. In addition to an enhanced rights certificate it contains the field \"TargetSubjectKeyIdentifier\" (OID \"1.3.6.1.4.1.2916.3.6.509.5.111\") where the SubjectKeyIdentifier of the regarding ECUCert is stored.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "SecOCISCertificateRequestBody",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SecOCISCertificateRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Certificate successfully retrieved.",
                        "schema": {
                            "$ref": "#/definitions/CertificateResponseBody"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "DiagCertRequestBody": {
            "type": "object",
            "properties": {
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                },
                "ecu": {
                    "description": "Target ECU.",
                    "type": "string"
                },
                "vin": {
                    "description": "Target VIN.",
                    "type": "string"
                },
                "userRole": {
                    "description": "User role of subject.",
                    "type": "string",
                    "format": "byte"
                }
            },
            "required": [
                "backendCertSkid"
            ]
        },
        "DiagCertResponseBody": {
            "type": "object",
            "properties": {
                "diagCert": {
                    "type": "string",
                    "format": "byte[]"
                },
                "serialNumber": {
                    "type": "string",
                    "format": "byte[]"
                }
            }
        },
        "CheckOwnershipRequestBody": {
            "type": "object",
            "properties": {
                "challenge": {
                    "type": "string",
                    "format": "byte[]"
                },
                "backendCertSkid": {
                    "type": "string",
                    "format": "byte[]"
                },
                "diagCertSerialNo": {
                    "type": "string",
                    "format": "byte[]"
                }
            },
            "required": [
                "challenge",
                "backendCertSkid",
                "diagCertSerialNo"
            ]
        },
        "CheckOwnershipResponseBody": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "byte[]"
                }
            }
        },
        "EnhDiagRequestBody": {
            "type": "object",
            "properties": {
                "diagCertSerialNo": {
                    "description": "The serial number of the DiagnosticCert whose key material should be used for signing the challenge.",
                    "type": "string",
                    "format": "byte[]"
                },
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                },
                "ecu": {
                    "description": "Target ECU.",
                    "type": "string"
                },
                "vin": {
                    "description": "Target VIN.",
                    "type": "string"
                }
            },
            "required": [
                "diagCertSerialNo",
                "backendCertSkid"
            ]
        },
        "EnhDiagResponseBody": {
            "type": "object",
            "properties": {
                "enhDiagCerts": {
                    "type": "string",
                    "format": "byte[][]"
                }
            }
        },
        "SecureVariantCodingRequestBody": {
            "type": "object",
            "properties": {
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                },
                "codingData": {
                    "description": "The coding data to be signed.",
                    "type": "string",
                    "format": "byte[]"
                },
                "ecu": {
                    "description": "Target ECU.",
                    "type": "string"
                },
                "vin": {
                    "description": "Target VIN.",
                    "type": "string"
                }
            },
            "required": [
                "backendCertSkid",
                "codingData"
            ]
        },
        "SecureVariantCodingResponseBody": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "byte[]"
                },
                "codingCertificate": {
                    "type": "string",
                    "format": "byte[]"
                },
                "certExpirationDate": {
                    "type": "string",
                    "format": "date"
                }
            }
        },
        "TimeCertRequestBody": {
            "type": "object",
            "properties": {
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                },
                "nonce": {
                    "description": "Nonce.",
                    "type": "string",
                    "format": "byte[]"
                },
                "ecu": {
                    "description": "Target ECU.",
                    "type": "string"
                },
                "vin": {
                    "description": "Target VIN.",
                    "type": "string"
                }
            },
            "required": [
                "backendCertSkid",
                "nonce",
                "vin"
            ]
        },
        "TimeCertResponseBody": {
            "type": "object",
            "properties": {
                "timeCert": {
                    "type": "string",
                    "format": "byte[]"
                }
            },
            "required": [
                "timeCert"
            ]
        },
        "CheckActiveDiagRequestBody": {
            "type": "object",
            "properties": {
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                },
                "diagCertSerialNo": {
                    "description": "The serial number of the DiagnosticCert whose key material should be used for signing the challenge.",
                    "type": "string",
                    "format": "byte[]"
                },
                "ecu": {
                    "description": "Target ECU.",
                    "type": "string"
                },
                "vin": {
                    "description": "Target VIN.",
                    "type": "string"
                },
                "userrole": {
                    "description": "User role of subject.",
                    "type": "string"
                }
            },
            "required": [
                "backendCertSkid",
                "diagCertSerialNo"
            ]
        },
        "CheckSignatureRequestBody": {
            "type": "object",
            "properties": {
                "signature": {
                    "type": "string",
                    "format": "byte[]"
                },
                "signedCodingData": {
                    "type": "string",
                    "format": "byte[]"
                },
                "certificate": {
                    "type": "string",
                    "format": "byte[]"
                }
            },
            "required": [
                "signature",
                "signedCodingData",
                "certificate"
            ]
        },
        "ReplacementPackageRequestBody": {
            "type": "object",
            "properties": {
                "ecuCert": {
                    "description": "The current ECU certificate.",
                    "type": "string",
                    "format": "byte[]"
                },
                "target": {
                    "description": "The level at which to replace certificates.",
                    "type": "string",
                    "enum": [
                        "ECU",
                        "BACKEND",
                        "ROOT"
                    ]
                },
                "backendCertSkid": {
                    "description": "A byte array containing the SubjectKeyIdentifier of the parent BackendCert.",
                    "type": "string",
                    "format": "byte[]"
                }
            },
            "required": [
                "ecuCert",
                "target"
            ]
        },
        "ReplacementPackageResponseBody": {
            "type": "object",
            "properties": {
                "target": {
                    "type": "string",
                    "enum": [
                        "ECU",
                        "BACKEND",
                        "ROOT"
                    ]
                },
                "ecuCertificate": {
                    "type": "string",
                    "format": "byte[]"
                },
                "backendLinkCertificate": {
                    "type": "string",
                    "format": "byte[]"
                },
                "backendCertificate": {
                    "type": "string",
                    "format": "byte[]"
                },
                "rootCertificate": {
                    "type": "string",
                    "format": "byte[]"
                },
                "rootLinkCertificate": {
                    "type": "string",
                    "format": "byte[]"
                }
            }
        },
        "Certificate": {
            "type": "object",
            "properties": {
                "backendCertId": {
                    "type": "string",
                    "format": "byte[]"
                },
                "serialNumber": {
                    "type": "string"
                },
                "cert": {
                    "type": "string",
                    "format": "byte[]"
                }
            }
        },
        "SecOCISCertificateRequestBody": {
            "type": "object",
            "properties": {
                "backendCertId": {
                    "type": "string",
                    "format": "byte[]"
                },
                "diagCertSerialNumber": {
                    "type": "string"
                },
                "ecu": {
                    "type": "string"
                },
                "ecuCert": {
                    "type": "string",
                    "format": "byte[]"
                },
                "vin": {
                    "type": "string"
                }
            },
            "required": [
                "backendCertId",
                "diagCertSerialNumber",
                "ecu",
                "ecuCert"
            ]
        },
        "CertificateRequestBody": {
            "type": "object",
            "properties": {
                "backendCertId": {
                    "type": "string",
                    "format": "byte[]"
                },
                "serialNumber": {
                    "type": "string"
                }
            }
        },
        "CertificateResponseBody": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/Certificate"
            }
        },
        "Response": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "result": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}