#Generated by ResourceBundle Editor (http://essiembre.github.io/eclipse-rbe/)

activeDiagManualSelection = Active Diagnostic False - Certificate Selection is set to MANUAL

apiVersionCheck = API Version:

automatedLogOutUserIs = Automated Logout was called, the default user is logged in.

backendNotFound = Backend CA Certificate was not found.

backendNotFoundAssociatedInputLink = Backend CA certificate not found associated with the input link certificate with subject key: {0}.

backendNotFoundIssuedLinkSubjKey = No Backend CA certificate found which could have issued the link certificate with subject key: {0}.

backendNotFoundIssuedSubjKey = Backend not found which could have issued the certificate with subject key: {0}.

backendNotFoundSubjKey = No backend found for certificate with subject key: {0}.

backendSerialNumberDecryptionFailed = Failed to decode the backend subject key identifier.

backendSubjKeyAndDataToBeSignedMandatory = Backend subject key identifier and data to be signed are mandatory.

backendWithoutZkNo = The backend found with the identifier: {0} does not have a ZK Number

badRequestOnPaginatedResults = Bad request. Page and size should be equal or bigger than 1

businessEnvConfig = Business configuration retrieved: {0}.

cannotCloseDirectoryStreamAfterProcessingImport = Cannot close data stream after processing import.

cannotCloseDirectoryStreamAfterProcessingValidation = Cannot close the data stream after processing validation.

cannotCloseStreamOnCertificateOperations = Cannot close the stream on certificate operation.

cannotCloseStreamOnCreateCertificate = Cannot close stream after create certificate from bytes.

cannotCreateCSR = Cannot create CSR of requested type: {0}.

cannotReadFile = Cannot read file

cannotReadFileFromPath = Cannot read the file from path: {0}.

cannotReadTheMultipart = Cannot read the multipart data from input: {0}.

certAlreadyExistsWithAuthKeyAndSN = Certificate with authority key: {0} and serial number: {1} already exists in store.

certAlreadyExistsWithSubjectKey = Certificate already exists with subject key: {0}.

certAlreadyExistsWithSubjectKeyAndZkNo = Certificate already exists with subject key: {0} and ZK Number: {1}.

certPublicKeyDoesntMatchPublicKeyFromPrivateKey = Certificate public key: {0} does not match the public key: {1} computed from private key of the certificate with subject key: {2}.

certType.BackendCaCertificate                = Backend CA Certificate
certType.BackendCaLinkCertificate            = Backend CA Link Certificate
certType.DiagnosticAuthenticationCertificate = Diagnostic Authentication Certificate
certType.EcuCertificate                      = ECU Certificate
certType.EnhancedRightsCertificate           = Enhanced Rights Certificate
certType.NoType                              = Unknown Type Certificate
certType.RootCaCertificate                   = Root CA Certificate
certType.RootCaLinkCertificate               = Root CA Link Certificate
certType.SecOcIs                             = SecOcIs Certificate
certType.TimeCertificate                     = Time Certificate
certType.VariantCodeUserCertificate          = Variant Coding User Certificate
certType.VariantCodingDeviceCertificate      = Variant Coding Device Certificate

certificateAlreadyRolledBack = Already in rollback mode.

certificateBytesCannotBeRead = Certificate bytes cannot be read. The crypto-library returns the reason: {0}.

certificateCannotEnableRollback = Rollback mode can not be activated.

certificateDoesNotExist = Certificate does not exist.

certificateDoesNotExistInUserStore = The certificate with ID: {0} does not exist in current user-specific certificate store.

certificateExpiredInvalidDates = Certificate with subject key identifier: {0} is expired or has invalid data for "valid To" and "valid From".

certificateImportNotPossibleRollbackActive = Import not possible, rollback mode active for certificate with subject key identifier {0}.

certificateImportedSuccessfully = The {0} with subject key identifier: {1} was imported successfully.

certificateImportedSuccessfullyDetailMessage = The {0} with subject key identifier: {1}, authority key identifier: {2} and serial number: {3} was imported successfully.

certificateNotFound = Certificate not found.

certificateNotFoundManualSelection = Manual selection: No Certificates provided.

certificateOfTypeNotFound = Certificate of type: {0} not found.

certificateOfTypeNotFoundForIdentifier = Can not find {0} with ZK Number >{1}< | BSKI >{2}<.

certificateReplacementPackageNotFound = Certificate replacement package not found.

certificateRollbackDeleteOldCertificates = Roll back of old certificates not possible. Remove old certificates if necessary.

certificateRollbackDisableSuccessful = Rollback disabled for certificate with subject key identifier: {0}.

certificateRollbackNotActive = Rollback is currently not active for the specified certificate.

certificateRollbackNotAllowedForType = Rollback not allowed for type: {0}.

certificateRollbackSuccessful = Rollback successful for certificate with subject key identifier: {0}.

certificateSignReqFailed = Certificate Sign Request validation failed: {0}.

certificateStructureValidationFailed = Certificate structure validation failed for certificate type {0} with serial number {1} and authority key identifier {2}. Reason:

certificateValidatesSuccessfully = Certificate: {0} with subject key identifier: {1} was validated successfully.

certificateWithIDRetrievedFromUserStore = Certificate with ID: {0} retrieved from user-specific certificate store.

certificateWithSignatureAndPKReplaced = Certificate with signature: {0} and public key: {1} will be replaced by the certificate with signature: {2} and public key: {3}.

certificatesDownloadBackendsError = Error during downloading certificates from the backend: {0}.

chainOfTrustImportingFailed = Chain of trust importing failed. Reason: {0}.

chainOfTrustValidationFailed = Chain of trust validation failed. Reason: {0}.

checkSystemIntegrity = Checked System Integrity

checkSystemIntegrityLog = Checked System Integrity Log

cleanUpDeleteMoreThanTwoIdenticalCerts = More than two identical certificates found. Certificate of type: {0} with ID: {1}, serial number: {2}, subject key identifier: {3} and authority key identifier: {4} was removed.

configNotFoundForDeleting = Could not find configuration for deleting certificates.

configWithIdUpdated = Configuration with ID: {0} updated.

configurationMustNotBeNull = Configuration must not be null.

configurationNotFound = {0} configuration does not exist.

contentListOfNonVsmCertificates = {0} Update - Content list of NON-VSM ECU certificates for backend: {1} : {2}

couldNotCreateCertFormBytes = Could not create certificate from bytes input stream: {0}

couldNotFindCertificateFromBytes = Could not find certificate from data.

couldNotFindConfiguration = Could not find configuration.

couldNotGenerateHolder = Failed to generate field "X509AttributeCertificateHolder". Reason: {0}.

couldNotImportCertificateDownloadedFromPKI = Could not import the certificate downloaded from PKI. Reason: {0}

couldNotParseMaxDateForCert = The field "MAX_DATE" could not be read for the certificate.

couldNotReadPrivateKey = Could not read private key from PKCS file. The crypto-library returns the reason: {0}.

couldNotUpdateConfiguration = Could not update configuration.

couldNotVerifySignature = Could not verify signature. Reason: {0}.

couldNotVerifySignatureForMessage = Could not verify signature for message.

csrAndPrivateKeyFoundForSubjKey = Found both CSR and private key for the certificate with subject key: {0}.

csrAndPrivateKeyNotFoundForSubjKey = Did not find CSR and private key for the certificate with subject key: {0}.

csrCreatedType = CSR of type: {0} with authority key identifier: {1} and public key: {2} created.

csrNotFound = The CSR with ID: {0} was not found.

csrTypeNotMatchCertType = CSR type: {0} does not match the type of the certificate ({1}) with subject key: {2}.

csrValidationFailed = Certificate Sign Request validation failed.

currentUserConfigRetrieved = Current user configuration retrieved.

decryptionOfPKCSPackageFailed = Decryption of Certificate Package failed for backend with subject key identifier: {0}.

defaultUser = default user

defaultUserNotLoggedIn = Default user not logged in.

deleteAccountWasCalled = The selected account was deleted.

deleteCSRUserAction = Signing Request for: {0} with ID: {1}, authority key identifier: {2} and public key: {3} removed by user action.

deleteCertificateAtRollback = {0} with ID: {1} removed when enabling rollback.

deleteCertificateDuringImport = Certificate of type: {0} with ID: {1} removed during import.

deleteCertificateUserAction = Certificate of type {0} with id: {1}, serial number: {2}, subject key identifier: {3} and authority key identifier: {4} removed by user action.

deleteCertificateUserActionWithPN = Certificate of type {0} with id: {1}, serial number: {2}, subject key identifier: {3} authority key identifier: {4} and ZK Number: {5} removed by user action.

deleteCertificatesCalledResultNotFound = Delete certificates was executed, but no certificate matching the deletion criteria was found.

deleteDiagnosticCertsEnd = End - Deletion of Diagnostic Authentication certificates which doesn't satisfy the minimal required remaining validity.

deleteDiagnosticCertsStart = Start - Deletion of Diagnostic Authentication certificates which doesn't satisfy the minimal required remaining validity.

deleteEcuCertsEnd = End - Deletion of expired VSM-ECU certificates.

deleteEcuCertsStart = Start - Deletion of expired VSM-ECU certificates.

deleteExpiredCertificateCronTrigger = Expired certificate of type: {0} with ID: {1}, serial number: {2}, subject key identifier: {3} and authority key identifier: {4} removed from user-specific certificate store when running cron job.

deleteMoreThan2IdenticalCertificates = More than two identical certificates found when running cron job. Certificate of type: {0} with ID: {1}, serial number: {2}, subject key identifier: {3}, authority key identifier: {4} was removed.

deletePortFromSystemPreferences = The entry containing the server port could not be deleted from system preferences. Reason {0}.

deletePortFromUserPreferences = The entry containing the server port could not be deleted from user preferences. Reason {0}.

deleteVariantCertsEnd = End - Deletion of Variant Coding certificates which doesn't satisfy the minimal required remaining validity.

deleteVariantCertsStart = Start - Deletion of Variant Coding certificates which doesn't satisfy the minimal required remaining validity.

deletedNonVsmCertificateZenzefi = {0} Update - NON VSM Certificate deleted: subject key identifier: {1} : removed from user-specific certificate store during update

deletedUserKeyPairForProduction = Deleted user key pair for production with ID: {0}, for: {1}.

deletingExpiredCertificatesForUser = Deleting expired certificates for: {0}.

determiningTargetCertificateNotFound = Couldn't find certificate when trying to determine the target for the replacement package.

enhRightsExistsOnlyInContextOfDiagAuth = Enhanced Rights Certificate exists only in context of Diagnostic Authentication Certificate.

enhancedRightsSupportsMultipleSelection = Enhanced Rights supports multiple test certificates. Please use single = true in order to change the state for a particular certificate.\r\n

entireMappingNothingFound = No mapping entry found for {0}

entireMappingReturned = Entire mapping returned {0}

errorAddingPKCS12Entry = Error adding PKCS#12 entry.

errorGettingEncodedCertificateBytes = Error when getting encoded certificate data. Reason: {0}.

errorWhenDownloadingPermissions = An error occurred while downloading the permissions: {0}

failedArchiveLogsToACustomPath = {0} Archive the logs to a custom path failed. Reason: {1}.

failedArchiveLogsToZip = {0} Archive the logs to zip failed. Reason: {1}.

failedCertificateTypeVariantCodingDevice = Certificate: {0} with subject key identifier: {1} was not imported.

failedDownloadLogFiles = {0} Download log file failed. Reason: {1}.

failedJavaArchitectureForXmlBindingContext = {0} XML processing failed {1}.

failedLogsToOutputStream = {0} Writing logs to file failed. Reason: {1}.

failedToCloseOutputStreamAfterWriteLogArchivesToZip = {0} Closing output stream after writing log archives to zip file failed. Reason: {1}.

failedToCloseOutputStreamAfterWriteLogFileToZip = {0} Closing output stream after writing log file to zip failed. Reason: {1}.

failedToCloseOutputStreamAfterWriteServiceLogFolderToZip = {0} Closing output stream after writing Service log folder to zip file failed. Reason: {1}.

failedToCloseOutputStreamAfterWritingLogs = {0} Closing output stream after writing logs failed. Reason: {1}.

failedToGetDirectoryStream = Cannot get the directory stream from: {0}.

failedToProcessDirectoryStream = The directory: {0} can not be processed.

failedWriteInstallationDetailsOnJsonGeneratingProcess = {0} Writing installation details failed on JSON generation process. Reason: {1}.

failedWriteInstallationDetailsOnJsonMappingProcess = {0} Writing installation details failed on JSON mapping process. Reason: {1}.

failedWriteInstallationDetailsOnOutput = {0} Writing of installation details on output failed. Reason: {1}.

failedWriteLogsToZidAndOutputStream = {0} Writing of logs to zip and outputStream failed. Reason: {1}.

foundMultipleCertificatesToBeReplacedBySignatureAndPK = Found multiple certificates to be replaced by certificate with signature: {0} and public key: {1}.

foundMultipleCertificatesWithDiffSigButSamePublicKey = Found multiple certificates with different signatures but same public key, which cannot be replaced by the input certificate, because the Serial No or SubjectKeyIndetifier or validity are not changed.

foundRootFolderWithoutRootCert = Found root folder with no root certificate in it.

generalConfigRetrieved = General configurations restored.

generateTesterNonce = Secure Random Nonce generated for testers

genericExceptionOccurred = A generic exception occurred while requesting {0}. For details please check the log file.

getCertificate = Get Certificate for authority key identifier {0} and Serial No {1}

getCurrentUserDetails = Successful call getCurrentUserDetails for user id: {0}

hostNameTakenFromEnvVariables = Host name taken from system environment variable.

hostNameTakenFromInetAddr = Host name taken from internet address.

hostNameTakenFromNativeCommand = The Host name was read from the native command.

httpMethodNotSupported = The request method {0} is not supported while requesting {1}.

idWasNotProvided = Id was not provided.

importInvalidUserRole = Invalid user role: {0}

importNotAllowedInvalidFieldPresent = {0} could not be imported as {1} was provided in the certificate.

importedCertificateNotX509Compliant = The imported certificate is not X.509 compliant. Import aborted.

invalidAlgIdentifier = Invalid algorithm identifier.

invalidAuthKeyIdentifier = Invalid authority key identifier.

invalidBaseCertificateId = Invalid base certificate ID.

invalidBasicConstraints = Invalid basic constraints.

invalidBusinessEnvConfig = Invalid business environment configuration.

invalidCertSelectionConfig = Invalid certificate selection configuration.

invalidCertificateSpecificData = Invalid certificate specific data for certificate type.

invalidCertificateTableColumnsConfig = Invalid certificate table columns configuration for property: {0}, containing value: {1}.

invalidCertificateType = Invalid certificate type: {0}.

invalidDMaxAgeLogConfig = Invalid max age log entry configuration.

invalidDeleteCertsScheduleConfig = Invalid delete certificates schedule configuration.

invalidDeleteExpiredCertsConfig = Invalid delete expired certificates configuration.

invalidDeleteRequestAuthKeySerialNo = Invalid delete request. Neither Authority key identifiers and Serial numbers pairs nor delete all were specified.

invalidDetailsPaneStateConfig = Invalid details pane state configuration.

invalidEcuVinRestrictionConfig = Invalid configuration for ECU/VIN restriction check property.

invalidExcludedUserRolesForAuthenticationConfig = Invalid excluded user roles for central authentication configuration.

invalidFormatForUserRole = Invalid format of user role. Possible values: {0}.

invalidInputEmptyList = Empty input list.

invalidInputForAuthorityKeyIdentifier = Invalid authority key identifier: {0}. The length is 20 bytes.

invalidInputForIdentifier = Invalid value for identifier: {0}. A valid value must have 20 bytes base 64 encoded (BSKI) or should match the regular expression (ZK Number).

invalidInputForSerialNumber = Invalid serial number: {0}. The max length is 16 bytes.

invalidInputForSubjectKeyIdentifier = Invalid subject key identifier: {0}. The length is 20 bytes.

invalidInputForTargetECU = Invalid target ECU: {0}. The max length is 30 bytes.

invalidInputForTargetVIN = Invalid target VIN: {0}. The length does not match the required 17 characters.

invalidInputForUUID = Invalid format for the given ID: {0}.

invalidInputNotBase64Encoded = The input is not Base64 encoded: {0}.

invalidIssuer = Invalid issuer.

invalidIssuerSerialNumber = Invalid issuer serial number.

invalidKeyUsage = Invalid key usage.

invalidLogLevelConfig = Invalid log level configuration.

invalidLogOffNoActionConfig = Invalid logoff no user action configuration.

invalidLogbackArchivePattern = Invalid logback archives pattern.

invalidLogbackFile = Invalid logback file pattern.

invalidMaxSizeLogConfig = Invalid max size log entry configuration.

invalidNonce = Invalid nonce.

invalidOrMissingPrivateKey = Invalid or missing private key for certificate with subject key: {0}.

invalidPKIRole = Invalid PKI role.

invalidPersistenceAuditEntriesValidationConfig = Invalid persist performance audit entries validation configuration.

invalidProdQualifier = Invalid prod qualifier.

invalidProdQualifierConfig = Invalid prod qualifier configuration.

invalidPublicKey = Invalid public key.

invalidRenewal = Invalid Renewal.

invalidSSLTrustStoreConfig = Invalid custom SSL trust store configuration.

invalidSSLValidationConfig = Invalid SSL validation configuration.

invalidSecretConfig = Invalid secret configuration.

invalidSerialNumber = Invalid serial number.

invalidServices = Invalid services.

invalidSignature = Invalid signature.

invalidSpecialEcu = Invalid special ECU.

invalidSubjKeyIdentifier = Invalid subject key identifier.

invalidSubject = Invalid subject.

invalidTargetEcu = Invalid target ECU.

invalidTargetSubjectKeyIdentifier = Invalid target subject key identifier.

invalidTargetVin = Invalid target VIN.

invalidThresholdsConfig = Invalid thresh holds configuration.

invalidUniqueEcuId = Invalid unique ECU ID.

invalidUserRole = Invalid user role.

invalidUserRoleConfig = Invalid user role configuration.

invalidUserScopeForPkiScopeChange = The PKI scope can only be changed as default / not logged in user.

invalidValidateCertsConfig = Invalid configuration for certificate validation.

invalidValidityCheckTimeToleranceConfig = Invalid value of time tolerance property used when certificates are validated.

invalidVersion = Invalid version.

issuerNotFound = Issuer: {0} not found which could have issued the: {1} certificate with subject key: {2}.

jsonInputParseError = Unable to parse input JSON.

limitedCryptographyStrength = Limited cryptography strength extension.

logOutUserIs = Logout was called, the default user is logged in.

logOutUserSwitchUserSame = User did not change, not logout was done.

mandatoryParamMissing = A mandatory parameter was missing while requesting {0}.

modeSingleCannotWorkWithTwoIDs = Mode single = true cannot work with two Ids

moreThanOneCertificateFoundForThisSN = More than one certificate found for this serial number.

multipleCertificatesDifSig = Found multiple certificates with different signature but same public key which cannot be replaced by the input certificate, because the Serial No or SubjectKeyIndetifier or validity are not changed.

noCertificateFoundMatchingCriteria = No Certificate was found matching the filter criteria. Params: [BackendCert-Subject-KeyIdentifier: {0}], [TargetECU: {1}], [TargetVIN: {2}], [UserRole: {3}] for userName: {4}.

noCertificateFoundMatchingCriteriaBasic = No Certificate was found matching the filter criteria. Params: [BackendCert-Subject-KeyIdentifier: {0}], [TargetECU: {1}], [TargetVIN: {2}], [UserRole: {3}]

noCertificateFoundMatchingCriteriaEnhanced = No Certificate was found matching the filter criteria. Params: [BackendCert-Subject-KeyIdentifier: {0}], [TargetECU: {1}], [TargetVIN: {2}], [Diag SN: {3}].

noCertificateFoundMatchingCriteriaVariantCoding = No Certificate was found matching the filter criteria. Params: [BackendCert-Subject-KeyIdentifier: {0}], [TargetECU: {1}], [TargetVIN: {2}].

noCertificateFoundMatchingTheFilterCriteriaDifferentSN = No Certificate was found matching the filter criteria. Different serial number.

noCertificateFoundWithGivenAKIAndSN = No certificate was found with given authority key identifier and serial number.

noCertificateFoundforBackendSkidWhenCreatingCSR = Backend CA certificate does not exist. Cannot find certificate or create CSR.

noCertificateWithGivenSNFound = No certificate with given serial number found.

noDeletedNonVsmCertificateZenzefi = {0} Update - No NON VSM Certificates were deleted

noKeyPairFoundForCert = No key pair found for certificate with [ID: {0}].

noPermissionsErrorWithLink = Retrieving permissions for certificates failed. Please check your permissions in ACDC <a href="{0}">{0}</a>.

noRootFoldersFound = No root folders found.

noVsmIdentifiersRetrieved = {0} Update - No NON-VSM ECU identifiers for backend ski: {1}

noVsmIdentifiersZenzefi = {0} Update - No Non-Vsm Identifiers were found for SKI: {1}

nonceSetOnlyForTimeCert = Nonce can be only for Time Certificate.

notAllowedToImportPrivateKey = The certificate with public key {0} and subject key identifier {1} comes together with a private key. It is not allowed to import private keys.

notFoundCertificate = Certificate with authority key identifier: {0} and serialNo: {1} not found.

nullConfigForCopyFound = Null configuration for copy was found.

nullOrEmptyTargetVIN = TargetVIN is null or empty.

operationNotAllowedImportIsRunning = Operation not allowed. Import is running

parentCannotBeEmpty = Parent cannot be empty.

parentCertInvalidBackendAndDiagSupportedForEnhRights = Specified parent type was {0}. This parent type is not allowed for requesting the desired certificate type.

parentDoesNotPassExtendedValidation = Results were found but at least one parent certificate in chain of trust does not pass the extended validation.

parentSubjectKeyNotMatchChildAuthKey = Parent subject key does not match child authority key.

parentSubjectKeyNotMatchChildSubjKey = Parent subject key does not match child subject key.

pkcsImportResult = {0} certificates successfully imported. {1} certificates failed to import.

portCouldNotBeSetInSystemPreferences = The server port could not be set in system preferences.

portCouldNotBeSetInSystemPreferencesNodeNotAvailable = The server port could not be set in system preferences, system preferences entry is not available.

portCouldNotBeSetInUserPreferences = The server port could not be set in user preferences.

portCouldNotBeWritten = The server port could not be set. Reason: {0}.

portSetInSystemPreferences = The server port was set in system preferences.

portSetInUserPreferences = The server port was set in user preferences.

privateKeyInChainAreadyUsed = The private key in this chain is already used.

productionUserKeyPairNotFound = User key pair for production not found.

propertyNotAllowedToBeOverridenInGeneralProperties = Property: {0} not allowed to be overwritten in configuration properties.

provideOneID = Please provide one ID.

providedCertParentNotExist = The provided certificate as parent does not exist in the current user-specific certificate store.

publicKey401ForRegisterUser = Unauthorized operation. Registered User can't retrieve the public key.

registeredUserNeedsToBeLoggedIn = No time certificate found. Can not create CSR since no user is logged in.

replacementPackageTargetDetermined = Target [{0}] has been determined. Input target VIN is: {1}

restoredCertificates = Restored {0} certificates.

retrievedAllCertificates = Retrieved all certificates.

returnCertificateList = List of Certificates belonging to the current user was returned

returnPublicKey = Systems public key value: 

rootCertificateRemovedFromUserStore = Root certificate: {0} with ID: {1} removed from the user-specific certificate store.

rootNotFoundAssociatedInputLinkSubjKey = Did not find root certificate associated with the input link certificate with subject key: {0}.

rootNotFoundForBackendSubjKey = Root not found for Backend CA certificate subject key: {0}.

rootNotFoundIssuedLinkSubjKey = Did not find root which could have issued the link certificate with subject key: {0}.

rootNotFoundWhichCouldHaveIssuedBackend = Root not found which could have issued the Backend CA certificate with subject key: {0}.

searchedCertificateDoesNotExistInUserStore = The certificate with authority key identifier: {0} and serial number: {1} does not exist in current user-specific certificate store.

serverVersionCheck = System Version:

sigVerificationFailedBackendSubjKey = Signature verification process failed for Backend CA certificate with subject key: {0}.

sigVerificationFailedInputLinkSubjKey = Signature verification process failed for the input link certificate with subject key: {0}.

sigVerificationFailedRootLinkSubjKey = Signature verification process failed for root link certificate with subject key: {0}.

sigVerificationFailedRootSubjKey = Signature verification process failed for root certificate with subject key: {0}.

sigVerificationFailedSubjKey = Signature verification process failed for certificate with subject key: {0}.

signChallangeWithPrivateKeyFailed = SignChallengeWithPrivateKey failed. Reason: {0}.

signatureVerificationFailed = Signature verification failed for certificate with authority key identifier: {0} and serial no : {1} and PKI role: {2}.

signingCodingStringFailed = Signing coding string failed.

skipLinkFeatureDisabled = {0} Update - Link Certificate update skipped due to feature disabled

skipNonVsmFeatureDisabled = {0} Update - NON VSM Certificate update skipped due to feature disabled

startNonVsmCertificatesDownload = {0} Update - Updating NON-VSM ECU certificates

stopNonVsmCertificatesDownload = {0} Update - Finished updating NON-VSM ECU certificates

systemPublicKeyGenerated = The public key was successfully generated.

targetECUNotMatchPattern = Target ECU does no match pattern: {0}.

targetVINNotMatchPattern = Target VIN does no match pattern: {0}.

testerNonceGenerated = The testerNonce was successfully generated.

thePublicKeyIsInvalid = The public key is invalid: {0}

friendlyNameIsInconsistent = The friendly name does not contain consistent ZK numbers.

friendlyNameFailsRegexCheck = The friendly name does not pass regular expression check.

timerNotResetOnUserInteraction = Timer was not reset based on user interaction. Reason: {0}.

timerNotSetAfterLogin = Timer was not reset after login. Reason: {0}.

tryingToDeleteExpiredCerts = Trying to delete expired certificates, time: {0}.

unAuthorizedOperationForRegisteredUser = Unauthorized operation. For registered user key pair cannot be generated.

unableToRetrieveHostName = Unable to retrieve host name. {0}.

unknownCertificateType = Unknown certificate type.

unknownUser = Unknown user: {0}.

updateNotDownloadedPreactiveCa = {0} Backend Update - The CA with ski {1} could not be downloaded from the PKI and will be skipped.

updateBackendProcessEnd = {0} Backend Update - End

updateBackendProcessStart = {0} Backend Update - Start

updateCertificatesStatusNotRunning = Not Running

updateCertificatesStatusPause = Pause

updateCertificatesStatusRunning = Running

updateCertificatesStepCreateCSRs = Creating CSRs

updateCertificatesStepCreateEnhancedCSRs = Create enhanced rights CSRs.

updateCertificatesStepDownloadCertificates = Downloading certificates

updateCertificatesStepDownloadEnhancedCertificates = Downloading enhanced rights certificates

updateCertificatesStepDownloadLinkCertificates = Downloading link certificates

updateCertificatesStepRetrieveBackendIdentifiers = Retrieving backend identifiers

updateCertificatesStepRetrieveBackends = Retrieving backends

updateCertificatesStepRetrievePermissions = Retrieving permissions

updateCertificatesStepUpdateBackends = Updating backends

updateCertificatesStepUpdateNonVSMCertificates = Retrieving NON-VSM ECU certificates.

updateDeleteCertWithAKIAndSN = {0} Update - Certificate deleted with authority key identifier: {1} and serial number: {2}.

updateDeleteMoreThanTwoIdenticalCerts = {0} Update - more than two identical certificates found. Certificate of type: {1} with ID: {2}, serial number: {3}, subject key identifier: {4} and authority key identifier: {5} was removed.

updateDeletedCertMismatchedEnrollmentId = {0} Update - Certificate deleted with authority key identifier: {1} and serial number: {2} due to mismatched enrollment id: {3}.

updateDidNotCreateCSRCertStillValid = {0} update - Did not create CSR for certificate with authority key identifier: {1} and serial number: {2} because the certificate is still valid.

updateDownloadRootBackendStop = Finished downloading roots and backends.

updateEcuBackendIdentifiersChanged = {0} Update - Update for BSKI {1} - ZK Number {2} -> {3}, ECU Package Timestamp {4} -> {5}

updateEcuBackendIdentifiersEquals = {0} Update - No update for BSKI {1} - ZK Number {2} and ECU Package Timestamp {3} are unmodified.

updateInvalidBackendIdentifiers = {0} Backend Update - The backend certificate with aki: {1} and ski: {2} could not be imported, because there is no matching root level certificate available. This certificate will be skipped.

updateProcessContinueWithoutPermissions = {0} Update - Continue without permissions

updateProcessEnd = {0} Update - End

updateProcessErrorWhenDownloadingPermissions = An error occurred while downloading the permissions: {0}

updateProcessStart = {0} Update - Start

updateReceiveBackendIdentifiers = Receiving backend identifiers

updateReceiveCert = {0} Update - Receiving {1} certificates.

updateReceivedCert = {0} Update - Received {1} certificates.

updateReceivedUserPermissions = {0} Update - Received user permissions: {1}.

updateRequestBackendIdentifiers = Requesting backend identifiers.

updateRequestCertForCSR = {0} Update - Requesting {1} certificate for CSR: {2}.

updateRequestingBackendCertChain = Requesting Backend CA certificate chain.

updateRequestingCert = {0} Update - Requesting {1} certificates.

updateStartCreateCSRsProcess = {0} Update - Start Create CSRs process.

updateStartCreateCSRsProcessWithBackendType = {0} Update - Start Create CSRs process for backend of type: {1}.

updateStartDownloadCertificates = {0} Update - Start Download certificates process.

updateStartUpdateBackendIdentifiers = {0} Update - Start update of ZK Numbers and ECU Package Timestamps.

updateStopCreateCSRsProcess = {0} Update - Stop Create CSRs process.

updateStopDownloadCertificates = {0} Update - Stop downloading certificates.

updateStopUpdateBackendIdentifiers = {0} Update - Stop update of ZK Numbers and ECU Package Timestamps.

updatingNonVsmCertificatesForBackend = {0} Update - Updating NON-VSM ECU certificates for {1} backends

userAlreadyExists = User already exists.

userAlreadyLoggedIn = A User is already logged in. Please logoff first and then login again. Login rejected.

userAlreadyLoggedOut = No User currently logged in.

userDoesNotExist = User with username: {0} does not exist.

userHaveInvalidField = User data is invalid.

userInvalidForRegistration = User invalid for registration: {0}

userLoggedIn = User {0} logged in.

userNotOnline = User is not online.

userRoleCannotBeEmpty = User role must not be empty.

userWasRegistered = User: {0} was registered.

validToNotEmpty = Valid To cannot be empty.

validationFailed = Validation failed: {0}.

vsmCertAutoDeleteSkipped = VSM Certificate deletion skipped as "Delete expired certificates" is disabled

vsmIdentifiersRetrievedForBackend = {0} Update - List of NON-VSM ECU identifiers for backend ski: {1} : {2}

warningRemovedDuringImport = The certificate with the authority key identifier {0}, the subject key identifier {1} and the Serial No {2} has been replaced.

writingCsrToFileFailed = Writing CSR to file failed. Reason: {0}.

writingPublicKeyToFileFailed = Writing public key value to file failed. Reason: {0}.

wrongInputAllParamsMandatory = Wrong input. All parameters are mandatory.

wrongInputCreatingCertificate = Wrong input for creating certificate.

zNoMappingFound = Mapping entry found for ZK Number {0} and BSKI {1}.
