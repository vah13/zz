#Generated by ResourceBundle Editor (http://essiembre.github.io/eclipse-rbe/)
# import messages basic and extended validation

backendNotFoundIssuedDiagCertForEnhRights = Backend CA certificate not found which could have a Diagnostic Authentication certificate for the input: {0} certificate with signature: {1}.

backendSubjectKeyIdentifierMandatory = Backend subject key identifier is mandatory.

cannotAddEmptyPKCS12Entry = Cannot add empty PKCS#12 entry.

cannotChangeActiveForTestingAutomaticMode = The checkbox "Active for Testing" cannot be selected as long as ZenZefi is active to decide, which certificates shall be selected.

cannotCloseOutputStreamAfterGeneratePkcs12 = Cannot close output stream after generating PKCS#12 package.

cannotDownloadSystemIntegrityReport = Cannot download the system integrity xml report.

cannotProcessOutputStreamOnGeneratePkcs12 = Cannot process output stream while PKCS#12 package is generated.

cannotSwitchActiveForTesting = Cannot switch active for testing.

challangeByteArrayMandatory = Challenge is mandatory.

checkOwnershipSuccess = Result of checkOwnership: {0}

checkOwnershipValidationFailed = "Check Ownership" validation failed.

collectingTimeAndSecocisCSRsNotCreatedBasedOnPermissions = Collecting Time- and SecOCIS CSRs which were created during getTime and getSecOCIS call.

collectingTimeAndSecocisCSRsNotCreatedBasedOnPermissionsStep = {0} Update - Collecting Time- and SecOCIS CSRs which were created during getTime and getSecOCIS call.

computeSignatures = Compute Signatures success, result size: {0}

configNotFoundForProxy = Did not find configuration for proxy.

couldNotCheckSignatureOfMessageForEngRights = Could not check signature of the message for an enhanced rights certificate, no public key.

couldNotFindDiagCert = Could not find Diagnostic Authentication certificate.

couldNotParseMaxDateForSecOCIS = Field "MAX_DATE" could not be read for SecOCIS certificate.

couldNotParseMaxDateForTimeCert = Field "MAX_DATE" could not be read for Time certificate.

diagCertOnlyEnhRightsCSRUnderIt = Diagnostic Authentication certificate can have only enhanced rights CSRs under it.

diagNotFoundForInputEnhRights = Diagnostic Authentication certificate not found for the {0} with signature: {1}.

dowloadingSecocisCertificateUsingCSRsNotCreateBasedOnPermissionsStep = {0} Update - Downloading SecOCIS Certificates using CSRs created during getSecOCIS call.

dowloadingTimeAndSecocisCertificateUsingCSRsNotCreateBasedOnPermissions = Downloading Time- and SecOCIS Certificates using CSRs created during getTime/getSecOCIS call.

dowloadingTimeCertificateUsingCSRsNotCreateBasedOnPermissionsStep = {0} Update - Dowloading Time Certificates using CSRs created during getTime call.

enhRightsAlreadyExistsWithSignature = The {0} with signature: {1} already exists.

enhRightsFoundForService = An Enhanced Rights Certificate was found. Serial Number: {0}, Serial Number Holder: {1}, SKI Holder: {2}

errorReadingZenZefiGeneralProperties = An error occurred while reading ZenZefi configuration file: {0}.

extractionOfPKCSPackageFailed = Cannot extract PKCS#12 package. File Corrupt.

failedSetConfiguredLogLevel = The configured log-level is invalid. Valid log-levels are: INFO, FINE, FINER, FINEST.

foundDiagCertWithParams = Found DiagCert[diagCert: {0}, serialNumber: {1}] for request parameters: [BackendCert-Subject-KeyIdentifier: {2}], [TargetECU: {3}], [TargetVIN: {4}], [UserRole: {5}] for username: [{6}]

foundDiagCertificateForCriteria = Found Diagnostic Authentication certificate for the filter criteria.

foundEnhCertificateForCriteria = Found {0} enhanced rights certificates for the filter criteria.

foundMoreCertificatesActiveForTesting = Error: Found more certificates of type {0} marked as "active for testing". 

foundMoreSecOcisActiveForTesting = Error: Found more SecOCIS certificates marked "active for testing".

getEnhRightsForService = Call of endpoint /certificates/search/enhRightsIds for backend: {0} and services: {1}

getRootAndBackendCertsResult = Certificate found - Type = {0} Base64Data = {1}

getRootAndBackendCertsStart = Request of backend and root certificates for the currently logged in user. Requested context: {0}

identifiersError = Error occured on resolving identifiers step.

integrityCheckReportError = The generation of the XML report for system integrity check failed. Reason: {0}.

invalidAutoCertUpdateConfig = Invalid configuration for auto certificates update.

invalidDownloadPermission = The user does not have permissions to download the {0} certificate.

invalidInputCodingData = Invalid input for coding data. Field cannot be empty.

invalidInputForCheckOwnership = Wrong input. All fields are mandatory and cannot be empty.

invalidInputForNonce = Invalid nonce {0}. The length is 32 bytes.

invalidInputForSpecialECU = Invalid special ECU: {0}. The length is 1 byte.

invalidInputForUniqueECUID = Invalid unique ECU ID: {0}. The max length is 30 bytes.

invalidNumberOfFailedLoginAttempts = Invalid number of failed login attempts.

invalidPaginationMaxRowsPerPage = Invalid max rows per page property.

invalidPaginationMaxRowsPerPageCheckMax = Invalid max rows per page maximum check value property.

invalidPaginationMaxRowsPerPageCheckMin = Invalid max rows per page minimum check value property.

invalidProxyPortNumber = The proxy port number is invalid.

invalidProxyPortNumberBounds = The proxy port number must be between {0} and {1}.

invalidProxyType = Invalid proxy type. Valid values: {0}.

invalidReplacementPackageTargetValue = The replacement package target value is not valid.

loginConfigurationInvalid = Configuration invalid. Login rejected.

loginErrorOccurred = A generic error occurred during login: {0}

loginFailedAccountDeleted = Password invalid. Too many retries. Certificate store has been deleted.

loginStoreOpened = User {0} is logged in. User store opened.

loginSuccessful = Success: User logged in successfully.

loginUserDoesNotExist = A local account for Username {0} does not exist. Please login online first to create a local account.

loginUserStoreCreated = User {0} is logged in. New user store created.

loginWrongPassword = Login failed - Incorrect password for Username {0}. Please enter password again.

logoutNoUserLoggedIn = No user logged in.

logoutSuccessful = User logged out successfully.

missingProxyHostProperty = The property proxy host is missing from ZenZefi properties.

missingProxyPortProperty = The property proxy port is missing from ZenZefi properties.

moreDiagCertFoundForCombo = More Diagnostic Authentication certificates were found for this combination of 'backendCertSubjKeyId' and 'diagCertSerialNumber'.

noAuthorizationTokenFound = No authorization token found! Please authorize Zenzefi using login functionality in Zenzefi UI.

noCSRCanBeCreatedForPKIUnknownBackend = No CSR is created for a PKI-unknown backend, or certificate for the given backend not found.

noCertificateFoundForSigning = No Variant Coding User Certificate found for signing coding data.

noDiagsFoundInSigModul = No Diagnostic Authentication certificate found.

noLinkCertsFoundZenZefi = {0} No Link-certificates available for ZenZefi.

noSecOCISCSRCanBeCreatedUserIsNotLoggedIn = No SecOCIS certificate found. Can not create CSR since no user is logged in.

noSecOcisFoundMatchingFilterCriteria = No SecOCIS certificate was found matching the filter criteria.

noSecOcisFoundmatchingFilter = No Sec OCIS was found matching the filter criteria. A CSR is available instead.

noTimeCSRCanBeCreatedUserIsNotLoggedIn = No Time certificate found. Can not create CSR since no user is logged in.

noTimeCertFoundMatchingFilter = No Time Certificate was found matching the filter criteria. A CSR is available instead.

noTimeCertFoundMatchingFilterCriteria = No Time certificate was found matching the filter criteria.

nonceCannotBeEmptyMatchPattern = Nonce cannot be empty for Time Certificates. It should match the pattern: {0} and the length has to be 32 bytes.

notFoundECUCertificate = Certificate with authority key identifier: {0} and unique ECU ID: {1} not found.

notFoundNewCertActiveForTesting = Not found new certificate active for testing.

notFoundOldCertActiveForTesting = Not found old certificate active for testing.

permissionValidationFailed = Permission validation failed: {0}.

permissionsError = Error occured on resolving permissions step.

pkcsDecodeFailed = Failed to decode PKCS#12 package for backend with subject key identifier {0}.

proxyGet = Retrieved proxy value.

proxyHttpsProtocol = The proxy must be a valid hostname and support the HTTPS protocol.

proxySet = The proxy was set to {0}.

returnOwnershipWithParams = CheckOwnership success for request: [ECUChallenge: {0}], [BackendCert-Subject-KeyIdentifier: {1}], [SerialNumber: {2}] for username: [{3}].

secOcisFoundmatchingFilter = A Sec OCIS was found matching the filter criteria.

serverConfiguredNotToDeletePort = ZenZefi was configured not to unpublish the port from registry.

serverConfiguredNotToWritePort = ZenZefi was configured not to publish the port in registry.

setProxyOnlyForDefaultUser = Only the default user can set the proxy.

sigVerificationFailedForEnhRightsWithSigKey = Signature verification process failed for enhanced rights certificate with signature key: {0}.

signEcu = The  ECU with Id {0} was signed successfully.

specialECUBBytesMaxSize = Special ECU max size is 1 byte. It cannot be empty for ECU certificates.

specialECUCanBeOnlyECUCert = Special ECU is allowed for ECU certificates only.

successfullyLogLevelConfig = The logging level was set to: {0}.

successfullyWroteLogFile = The log file was successfully loaded and created.

successfullyWroteLogFiles = The log files were successfully archived.

systemIntegrityCheckFailedNoMachineNameConfig = System integrity check failed. Machine name config not found.

systemIntegrityCheckFailedWrongMachineName = System integrity failed. Wrong machine name.

systemIntegrityReportNotFound = System integrity report not found.

targetECUNotApplyToECU = TargetECU does not apply to ECU certificate.

targetVINNotApplyToECU = TargetVIN does not apply to ECU certificate.

tokenWillBeRevokedTransitionNotPossible = Since transition is not possible the retrieved token will be revoked.

transitionNotPossible = Logging out current ZenZefi user {0}. It does not match authenticated user {1}.

uniqueECUIDOnlyForECUCert = Unique ECUID is allowed for ECU certificates only.

uniqueEcuIDMaxSize = Unique ECUID max size is 30 bytes and it cannot be empty for ECU Certificates.

unknownUpdateType = Unknown update type.

updateCertificatesStatusNotRunning = Not Running.

updateCertificatesStatusPause = Pause.

updateCertificatesStatusRunning = Running.

updateCertificatesStepCreateCSRs = Create CSRs.

updateCertificatesStepCreateEnhancedCSRs = Create enhanced rights CSRs.

updateCertificatesStepDownloadDiagnosticCertificates = Download Diagnostic Authentication certificates

updateCertificatesStepDownloadEnhancedCertificates = Downloading Enhanced Rights certificates.

updateCertificatesStepDownloadLinkCertificates = Downloading link certificates

updateCertificatesStepDownloadOtherCertificates = Downloading other certificates.

updateCertificatesStepNone = Not available.

updateCertificatesStepRetrieveBackendIdentifiers = Retrieving backend identifiers

updateCertificatesStepRetrieveBackends = Retrieving backends.

updateCertificatesStepRetrievePermissions = Retrieving permissions.

updateCertificatesStepUpdateBackends = Updating backends.

updateCertificatesStepUpdateNonVSMCertificates = Retrieving NON-VSM ECU certificates.

updateCreatedCSRWithAKIAndPKIRole = {0} Update - CSR created with authority key identifier: {1} and pki role: {2}.

updateCreatedCSRWithAKIPKIRoleUserRole = {0} Update - CSR created with authority key identifier: {1}, pki role: {2} and user role: {3}.

updateDeleteCSRUnderBackendWithSKIAndSN = {0} Update - CSRs deleted under backend with subject key identifier: {1} and serial number: {2}.

updateDeletingCertForWhichUserDoesNotHavePermission = {0} Update - Deleting certificates the user does not have permissions for backend with subject key identifier: {1} and serial number: {2}.

updateDownloadRootBackendStart = {0} Update - Start Download Root and Backend CA certificates process.

updateDownloadRootBackendStop = {0} Update - End Download Root and Backend CA certificates process.

updateEndDeletingCertsWhichAreNotReplaced = {0} Update - End deleting certificates which have not been replaced.

updateOperationNotAllowed = Operation not allowed while certificate update process is active.

updateReceiveBackendIdentifiers = {0} Update - Receiving Backend identifiers.

updateReceiveDiagnosticCert = {0} Update - Receiving Diagnostic Authentication certificates.

updateReceivedBackendCertChain = {0} Update - Received Backend CA certificate chain: {1}.

updateReceivedBackendIdentifiers = {0} Update - Received Backend CA identifiers: {1}.

updateReceivedDiagnosticCert = {0} Update - Received Diagnostic Authentication certificates from PKI: {1}.

updateReceivedEnhancedRightsCert = {0} Update - Received Enhanced Rights certificates from PKI: {1}.

updateReceivedRemainingCert = {0} Update - Received remaining certificates (Time, SecOCIS, Variant Coding User, ECU) from PKI: {1}.

updateReceivingBackendCertChain = {0} Update - Receiving Backend CA certificate chain.

updateReceivingEnhancedRightsCert = {0} Update - Receiving Enhanced Rights certificates.

updateReceivingRemainingCert = {0} Update - Receiving remaining certificates (Time, SecOCIS, Variant Coding User, ECU).

updateReceivingUserPermissions = {0} Update - Receiving user permissions.

updateRequestBackendIdentifiers = {0} Update - Requesting Backend identifiers.

updateRequestDiagForCSR = {0} Update - Request Diagnostic Authentication certificates for following CSRs: {1}.

updateRequestEnhancedCSR = {0} Update - Request Enhanced Rights certificates for following CSRs: {1}.

updateRequestRemainingCertsForCSR = {0} Update - Requesting certificates for following CSRs: {1}.

updateRequestingBackendCertChain = {0} Update - Requesting Backend CA certificate chain.

updateRequestingDiagnosticCert = {0} Update - Requesting Diagnostic Authentication certificates.

updateRequestingEnhancedCSR = {0} Update - Requesting Enhanced Rights certificates.

updateRequestingRemainingCert = {0} Update - Requesting remaining certificates (Time, SecOCIS, Variant Coding User, ECU).

updateRequestingUserPermissions = {0} Update - Requesting user permissions.

updateStartCreateEnhancedCSR = {0} Update - Start Create Enhanced Rights CSRs process.

updateStartDeletingCertsWhichAreNotReplaced = {0} Update - Start deleting certificates which have not been replaced.

updateStartDownloadEnhancedCSR = {0} Update - Start Download Enhanced Rights certificates process.

updateStartDownloadLinkCertificates = {0} Update - Start Download Link certificates process.

updateStartDownloadUserPermissions = {0} Update - Start download user permissions.

updateStopCreateEnhancedCSR = {0} Update - Stop creating Enhanced Rights CSRs.

updateStopDownloadEnhancedRightsCert = {0} Update - Stop Download Enhanced Rights certificates process.

updateStopDownloadLinkCertificates = {0} Update - Stop Download Link certificates process.

updateStopDownloadUserPermissions = {0} Update - Stop download user permissions.

userAlreadyLogged = A User is already logged in. Please logoff first. Login rejected.

userLoginPasswordsNotMatch = Input password does not match password for user: {0}.

userRoleSetDiagCertificate = User role only applies to Diagnostic Authentication certificates or Time certificates

wrongServerAddress = Invalid server address configuration

updateLinkBackendIdentifiersChanged = {0} Update - Update for SKI {1} - Link Certificate Timestamp {2} -> {3}

updateLinkBackendIdentifiersEquals = {0} Update - No update for SKI {1} - Link Certificate Timestamp {2}

notFoundLinkCertificate = Could not find Root or Backend Link certificate with BSKI: {0}